/* tslint:disable */
/* eslint-disable */
/*
Baseten management API

REST API for management of Baseten resources

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UpdateAutoscalingSettingsResponseV1 } from '../models';
// @ts-ignore
import { UpdateAutoscalingSettingsV1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AutoscalingSettingApi - axios parameter creator
 * @export
 */
export const AutoscalingSettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates a deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a deployment\'s autoscaling settings
         * @param {string} modelId 
         * @param {string} deploymentId 
         * @param {UpdateAutoscalingSettingsV1} updateAutoscalingSettingsV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeploymentSettings: async (modelId: string, deploymentId: string, updateAutoscalingSettingsV1: UpdateAutoscalingSettingsV1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('updateDeploymentSettings', 'modelId', modelId)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('updateDeploymentSettings', 'deploymentId', deploymentId)
            // verify required parameter 'updateAutoscalingSettingsV1' is not null or undefined
            assertParamExists('updateDeploymentSettings', 'updateAutoscalingSettingsV1', updateAutoscalingSettingsV1)
            const localVarPath = `/v1/models/{model_id}/deployments/{deployment_id}/autoscaling_settings`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-model_id-`)))
                .replace(`{${"deployment_id"}}`, encodeURIComponent(String(deploymentId !== undefined ? deploymentId : `-deployment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateAutoscalingSettingsV1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/models/{model_id}/deployments/{deployment_id}/autoscaling_settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateAutoscalingSettingsV1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a development deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a development deployment\'s autoscaling settings
         * @param {string} modelId 
         * @param {UpdateAutoscalingSettingsV1} updateAutoscalingSettingsV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevelopmentSetting: async (modelId: string, updateAutoscalingSettingsV1: UpdateAutoscalingSettingsV1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('updateDevelopmentSetting', 'modelId', modelId)
            // verify required parameter 'updateAutoscalingSettingsV1' is not null or undefined
            assertParamExists('updateDevelopmentSetting', 'updateAutoscalingSettingsV1', updateAutoscalingSettingsV1)
            const localVarPath = `/v1/models/{model_id}/deployments/development/autoscaling_settings`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-model_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateAutoscalingSettingsV1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/models/{model_id}/deployments/development/autoscaling_settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateAutoscalingSettingsV1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a production deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a production deployment\'s autoscaling settings
         * @param {string} modelId 
         * @param {UpdateAutoscalingSettingsV1} updateAutoscalingSettingsV1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus: async (modelId: string, updateAutoscalingSettingsV1: UpdateAutoscalingSettingsV1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('updateStatus', 'modelId', modelId)
            // verify required parameter 'updateAutoscalingSettingsV1' is not null or undefined
            assertParamExists('updateStatus', 'updateAutoscalingSettingsV1', updateAutoscalingSettingsV1)
            const localVarPath = `/v1/models/{model_id}/deployments/production/autoscaling_settings`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-model_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateAutoscalingSettingsV1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/models/{model_id}/deployments/production/autoscaling_settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateAutoscalingSettingsV1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutoscalingSettingApi - functional programming interface
 * @export
 */
export const AutoscalingSettingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutoscalingSettingApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates a deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a deployment\'s autoscaling settings
         * @param {AutoscalingSettingApiUpdateDeploymentSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeploymentSettings(requestParameters: AutoscalingSettingApiUpdateDeploymentSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAutoscalingSettingsResponseV1>> {
            const updateAutoscalingSettingsV1: UpdateAutoscalingSettingsV1 = {
                min_replica: requestParameters.min_replica,
                max_replica: requestParameters.max_replica,
                autoscaling_window: requestParameters.autoscaling_window,
                scale_down_delay: requestParameters.scale_down_delay,
                concurrency_target: requestParameters.concurrency_target
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeploymentSettings(requestParameters.modelId, requestParameters.deploymentId, updateAutoscalingSettingsV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a development deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a development deployment\'s autoscaling settings
         * @param {AutoscalingSettingApiUpdateDevelopmentSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevelopmentSetting(requestParameters: AutoscalingSettingApiUpdateDevelopmentSettingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAutoscalingSettingsResponseV1>> {
            const updateAutoscalingSettingsV1: UpdateAutoscalingSettingsV1 = {
                min_replica: requestParameters.min_replica,
                max_replica: requestParameters.max_replica,
                autoscaling_window: requestParameters.autoscaling_window,
                scale_down_delay: requestParameters.scale_down_delay,
                concurrency_target: requestParameters.concurrency_target
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDevelopmentSetting(requestParameters.modelId, updateAutoscalingSettingsV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a production deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a production deployment\'s autoscaling settings
         * @param {AutoscalingSettingApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatus(requestParameters: AutoscalingSettingApiUpdateStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAutoscalingSettingsResponseV1>> {
            const updateAutoscalingSettingsV1: UpdateAutoscalingSettingsV1 = {
                min_replica: requestParameters.min_replica,
                max_replica: requestParameters.max_replica,
                autoscaling_window: requestParameters.autoscaling_window,
                scale_down_delay: requestParameters.scale_down_delay,
                concurrency_target: requestParameters.concurrency_target
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatus(requestParameters.modelId, updateAutoscalingSettingsV1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AutoscalingSettingApi - factory interface
 * @export
 */
export const AutoscalingSettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutoscalingSettingApiFp(configuration)
    return {
        /**
         * Updates a deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a deployment\'s autoscaling settings
         * @param {AutoscalingSettingApiUpdateDeploymentSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeploymentSettings(requestParameters: AutoscalingSettingApiUpdateDeploymentSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateAutoscalingSettingsResponseV1> {
            return localVarFp.updateDeploymentSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a development deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a development deployment\'s autoscaling settings
         * @param {AutoscalingSettingApiUpdateDevelopmentSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevelopmentSetting(requestParameters: AutoscalingSettingApiUpdateDevelopmentSettingRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateAutoscalingSettingsResponseV1> {
            return localVarFp.updateDevelopmentSetting(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a production deployment\'s autoscaling settings and returns the update status.
         * @summary Updates a production deployment\'s autoscaling settings
         * @param {AutoscalingSettingApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(requestParameters: AutoscalingSettingApiUpdateStatusRequest, options?: AxiosRequestConfig): AxiosPromise<UpdateAutoscalingSettingsResponseV1> {
            return localVarFp.updateStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateDeploymentSettings operation in AutoscalingSettingApi.
 * @export
 * @interface AutoscalingSettingApiUpdateDeploymentSettingsRequest
 */
export type AutoscalingSettingApiUpdateDeploymentSettingsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AutoscalingSettingApiUpdateDeploymentSettings
    */
    readonly modelId: string
    
    /**
    * 
    * @type {string}
    * @memberof AutoscalingSettingApiUpdateDeploymentSettings
    */
    readonly deploymentId: string
    
} & UpdateAutoscalingSettingsV1

/**
 * Request parameters for updateDevelopmentSetting operation in AutoscalingSettingApi.
 * @export
 * @interface AutoscalingSettingApiUpdateDevelopmentSettingRequest
 */
export type AutoscalingSettingApiUpdateDevelopmentSettingRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AutoscalingSettingApiUpdateDevelopmentSetting
    */
    readonly modelId: string
    
} & UpdateAutoscalingSettingsV1

/**
 * Request parameters for updateStatus operation in AutoscalingSettingApi.
 * @export
 * @interface AutoscalingSettingApiUpdateStatusRequest
 */
export type AutoscalingSettingApiUpdateStatusRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AutoscalingSettingApiUpdateStatus
    */
    readonly modelId: string
    
} & UpdateAutoscalingSettingsV1

/**
 * AutoscalingSettingApiGenerated - object-oriented interface
 * @export
 * @class AutoscalingSettingApiGenerated
 * @extends {BaseAPI}
 */
export class AutoscalingSettingApiGenerated extends BaseAPI {
    /**
     * Updates a deployment\'s autoscaling settings and returns the update status.
     * @summary Updates a deployment\'s autoscaling settings
     * @param {AutoscalingSettingApiUpdateDeploymentSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoscalingSettingApiGenerated
     */
    public updateDeploymentSettings(requestParameters: AutoscalingSettingApiUpdateDeploymentSettingsRequest, options?: AxiosRequestConfig) {
        return AutoscalingSettingApiFp(this.configuration).updateDeploymentSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a development deployment\'s autoscaling settings and returns the update status.
     * @summary Updates a development deployment\'s autoscaling settings
     * @param {AutoscalingSettingApiUpdateDevelopmentSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoscalingSettingApiGenerated
     */
    public updateDevelopmentSetting(requestParameters: AutoscalingSettingApiUpdateDevelopmentSettingRequest, options?: AxiosRequestConfig) {
        return AutoscalingSettingApiFp(this.configuration).updateDevelopmentSetting(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a production deployment\'s autoscaling settings and returns the update status.
     * @summary Updates a production deployment\'s autoscaling settings
     * @param {AutoscalingSettingApiUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoscalingSettingApiGenerated
     */
    public updateStatus(requestParameters: AutoscalingSettingApiUpdateStatusRequest, options?: AxiosRequestConfig) {
        return AutoscalingSettingApiFp(this.configuration).updateStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
