/* tslint:disable */
/* eslint-disable */
/*
Baseten management API

REST API for management of Baseten resources

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeploymentV1 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DeploymentApi - axios parameter creator
 * @export
 */
export const DeploymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a model\'s deployment by id and returns the deployment.
         * @summary Gets a model\'s deployment by id
         * @param {string} modelId 
         * @param {string} deploymentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsGet: async (modelId: string, deploymentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('detailsGet', 'modelId', modelId)
            // verify required parameter 'deploymentId' is not null or undefined
            assertParamExists('detailsGet', 'deploymentId', deploymentId)
            const localVarPath = `/v1/models/{model_id}/deployments/{deployment_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-model_id-`)))
                .replace(`{${"deployment_id"}}`, encodeURIComponent(String(deploymentId !== undefined ? deploymentId : `-deployment_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/models/{model_id}/deployments/{deployment_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a model\'s development deployment and returns the deployment.
         * @summary Gets a model\'s development deployment
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevelopmentDetails: async (modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getDevelopmentDetails', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/deployments/development`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-model_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/models/{model_id}/deployments/development',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a model\'s production deployment and returns the deployment.
         * @summary Gets a model\'s production deployment
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductionDetails: async (modelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getProductionDetails', 'modelId', modelId)
            const localVarPath = `/v1/models/{model_id}/deployments/production`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId !== undefined ? modelId : `-model_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "apiKeyAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/models/{model_id}/deployments/production',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeploymentApi - functional programming interface
 * @export
 */
export const DeploymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeploymentApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a model\'s deployment by id and returns the deployment.
         * @summary Gets a model\'s deployment by id
         * @param {DeploymentApiDetailsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailsGet(requestParameters: DeploymentApiDetailsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailsGet(requestParameters.modelId, requestParameters.deploymentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a model\'s development deployment and returns the deployment.
         * @summary Gets a model\'s development deployment
         * @param {DeploymentApiGetDevelopmentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevelopmentDetails(requestParameters: DeploymentApiGetDevelopmentDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevelopmentDetails(requestParameters.modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a model\'s production deployment and returns the deployment.
         * @summary Gets a model\'s production deployment
         * @param {DeploymentApiGetProductionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductionDetails(requestParameters: DeploymentApiGetProductionDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentV1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductionDetails(requestParameters.modelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeploymentApi - factory interface
 * @export
 */
export const DeploymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeploymentApiFp(configuration)
    return {
        /**
         * Gets a model\'s deployment by id and returns the deployment.
         * @summary Gets a model\'s deployment by id
         * @param {DeploymentApiDetailsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailsGet(requestParameters: DeploymentApiDetailsGetRequest, options?: AxiosRequestConfig): AxiosPromise<DeploymentV1> {
            return localVarFp.detailsGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a model\'s development deployment and returns the deployment.
         * @summary Gets a model\'s development deployment
         * @param {DeploymentApiGetDevelopmentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevelopmentDetails(requestParameters: DeploymentApiGetDevelopmentDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DeploymentV1> {
            return localVarFp.getDevelopmentDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a model\'s production deployment and returns the deployment.
         * @summary Gets a model\'s production deployment
         * @param {DeploymentApiGetProductionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductionDetails(requestParameters: DeploymentApiGetProductionDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<DeploymentV1> {
            return localVarFp.getProductionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for detailsGet operation in DeploymentApi.
 * @export
 * @interface DeploymentApiDetailsGetRequest
 */
export type DeploymentApiDetailsGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeploymentApiDetailsGet
    */
    readonly modelId: string
    
    /**
    * 
    * @type {string}
    * @memberof DeploymentApiDetailsGet
    */
    readonly deploymentId: string
    
}

/**
 * Request parameters for getDevelopmentDetails operation in DeploymentApi.
 * @export
 * @interface DeploymentApiGetDevelopmentDetailsRequest
 */
export type DeploymentApiGetDevelopmentDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeploymentApiGetDevelopmentDetails
    */
    readonly modelId: string
    
}

/**
 * Request parameters for getProductionDetails operation in DeploymentApi.
 * @export
 * @interface DeploymentApiGetProductionDetailsRequest
 */
export type DeploymentApiGetProductionDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeploymentApiGetProductionDetails
    */
    readonly modelId: string
    
}

/**
 * DeploymentApiGenerated - object-oriented interface
 * @export
 * @class DeploymentApiGenerated
 * @extends {BaseAPI}
 */
export class DeploymentApiGenerated extends BaseAPI {
    /**
     * Gets a model\'s deployment by id and returns the deployment.
     * @summary Gets a model\'s deployment by id
     * @param {DeploymentApiDetailsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApiGenerated
     */
    public detailsGet(requestParameters: DeploymentApiDetailsGetRequest, options?: AxiosRequestConfig) {
        return DeploymentApiFp(this.configuration).detailsGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a model\'s development deployment and returns the deployment.
     * @summary Gets a model\'s development deployment
     * @param {DeploymentApiGetDevelopmentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApiGenerated
     */
    public getDevelopmentDetails(requestParameters: DeploymentApiGetDevelopmentDetailsRequest, options?: AxiosRequestConfig) {
        return DeploymentApiFp(this.configuration).getDevelopmentDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a model\'s production deployment and returns the deployment.
     * @summary Gets a model\'s production deployment
     * @param {DeploymentApiGetProductionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentApiGenerated
     */
    public getProductionDetails(requestParameters: DeploymentApiGetProductionDetailsRequest, options?: AxiosRequestConfig) {
        return DeploymentApiFp(this.configuration).getProductionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
